#   (c) Copyright 2019 EntIT Software LLC, a Micro Focus company, L.P.
#   All rights reserved. This program and the accompanying materials
#   are made available under the terms of the Apache License v2.0 which accompany this distribution.
#
#   The Apache License is available at
#   http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
########################################################################################################################
#!!
#! @description: Parses the given JSON input to retrieve the corresponding value addressed by the json_path input.
#!
#! @input json_input: JSON data input
#!                    Example: '{"k1": {"k2": ["v1", "v2"]}}'
#! @input json_path: path from which to retrieve value represented as a list of keys and/or indices.
#!                   Passing an empty list ([]) will retrieve the entire json_input.
#!                   Example: ["k1", "k2", 1]
#!
#! @output return_result: The corresponding value of the key referred to by json_path
#! @output return_code: "0" if parsing was successful, "-1" otherwise
#! @output error_message: Error message if there was an error when executing, empty otherwise
#!
#! @result SUCCESS: Parsing was successful (return_code == '0')
#! @result FAILURE: Otherwise
#!!#
########################################################################################################################

namespace: io.cloudslang.base-addons.json
operation:
  name: get_value_using_dots
  inputs:
    - json_input
    - json_path:
        required: false
  python_action:
    script: "def representsInt(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\ntry:\n  import json, re\n  quote = None\n  for c in json_input:\n    if c in ['\\'', '\\\"']:\n      quote = c\n      break\n  if quote == '\\'':\n    json_input = str(re.sub(r\"(?<!\\\\)(\\')\",'\"', json_input))\n    json_input = str(re.sub(r\"(\\\\')\",'\\'', json_input))\n  decoded = json.loads(json_input)\n  json_path = json_path.replace('[','.').replace(']','') #this to support key[instance] item[0]\n  for key in json_path.split(\".\"): # changed comma to dot\n    if key in [\"\", ''] and key not in decoded:\n      pass\n    else:\n      if representsInt(key):\n        key = int(key)\n      decoded = decoded[key]\n  if type(decoded) in [dict, list]:\n    encoded = json.dumps(decoded, ensure_ascii=False)\n    if quote == '\\'':\n      encoded = encoded.replace('\\'','\\\\\\'').replace('\\\"','\\'')\n  elif decoded is None:\n    encoded = 'null'\n  else:\n    encoded = str(decoded)\n  return_code = '0'\nexcept Exception as ex:\n  error_message = ex\n  return_code = '-1'"
  outputs:
    - return_result: "${ encoded if return_code == '0' else '' }"
    - return_code
    - error_message: "${ str(error_message) if return_code == '-1' else '' }"
  results:
    - SUCCESS: "${ return_code == '0' }"
    - FAILURE
